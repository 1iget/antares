#This is a makefile used in the actual build
#I didn't get enough dao to understand fully kbuild's magic
#ethersex's methods of compiling sucked, so I invented my own build script

include .config
include make/Makefile.lib
include src/arch/$(ARCH)/make.mk
objects-y:= src/
includes-y:=

$(info $(objects-y))
#Out-of-dir builds not yet supported
TOP_DIR=./
BUILD_DIR=
PHONY:= build clean
INCLUDES=-I"$(TOP_DIR)" -I"$(TOP_DIR)include"
Q=@


#TODO: Move this shit to another Makefile, some of it is avr-specific, so
#placing it here sucks. Okay for now, though

OUTPUT_TARGETS= $(TARGET_ELFFILE) $(TARGET_HEXFILE) $(TARGET_LSSFILE) $(TARGET_EEPFILE)


HEX_FLASH_FLAGS = -R .eeprom -R .fuse -R .lock -R .signature
HEX_EEPROM_FLAGS = -j .eeprom
HEX_EEPROM_FLAGS += --set-section-flags=.eeprom="alloc,load"
HEX_EEPROM_FLAGS += --change-section-lma .eeprom=0 --no-change-warnings
CFLAGS+=-mmcu=$(MCU) -DF_CPU=$(CONFIG_F_CPU) -Os -Wall
LDFLAGS+=-mmcu=$(MCU) -DF_CPU=$(CONFIG_F_CPU)

#TODO: Sort the deps stuff out
#CFLAGS += -MD -MP -MT $(*F).o -MF dep/$(@F).d 

all: 
	$(error This makefile should not be called directly)


#Create sylinks in include

define clean_includes
$(info Recreating symlinks...)
$(shell find $(TOPDIR)include -type l -delete)
endef

define includedir
$(eval lndir=$(patsubst %/,%,$(dir $(patsubst %/,%,$(1)))))
$(if $(wildcard $(1)include),$(shell mkdir -p $(TOP_DIR)include/$(subst $(TOP_DIR)src/,,$(lndir)))
	$(shell ln -s $(abspath $(1)include) $(TOP_DIR)include/$(patsubst %/,%,$(subst $(TOP_DIR)src/,,$(1)))))
endef


define ldmakes
$(eval subdirs=$(addprefix $(1),$(filter %/,$(objects-y))))
$(eval objects+=$(addprefix $(BUILD_DIR)$(1), $(filter %.o,$(objects-y))))
$(eval objects-y= )
$(foreach dir, $(subdirs),$(eval include $(dir)Makefile) $(call includedir,$(dir)) $(call ldmakes,$(dir)))
endef

define linkarch
$(shell rm -Rf $(TOP_DIR)include/arch)
$(shell ln -sf ../src/arch/$(ARCH)/include include/arch)
endef

load_makes=	$(call ldmakes, $(TOP_DIR)) 
build_objects=	$(addprefix $(TOP_DIR),$(objects)) 
clean_symlinks= $(call clean_includes)
link_arch=	$(call linkarch)

build: $(clean_includes) $(load_makes) $(linkarch) $(OUTPUT_TARGETS)
	@echo "<--Makefile.build done-->"

$(BUILD_DIR)%.o: $(BUILD_DIR)%.c $(subst .,_,$(subst /,_,$()))
	$(call colorize,$(t_ylw))
	@echo "Building object: $(@)"
	$(call colorize,$(col_rst))
	$(Q) $(call unquote,$(CONFIG_CC)) $(INCLUDES) $(CFLAGS) $(call unquote,$(CONFIG_CFLAGS)) -c  -o $(@) $< 


%.elf: $(build_objects)	
	$(Q) $(call unquote,$(CONFIG_CC)) $(LDFLAGS) $(call unquote,$(CONFIG_LDFLAGS)) -o $(@) $^ 
	$(call colorize,$(t_cyn))
	@echo "Linked ELF: $(@)"
	$(call colorize,$(col_rst))
	
%.hex: %.elf
	$(Q) $(call unquote,$(CONFIG_OBJCOPY)) -O ihex $(HEX_FLASH_FLAGS)  $< $@
	$(call colorize,$(t_cyn))
	@echo "Created Intel HEX file: $(@)"
	$(call colorize,$(col_rst))

%.eep: %.elf
	$(Q) $(call unquote,$(CONFIG_OBJCOPY)) $(HEX_EEPROM_FLAGS) -O ihex $< $@ || exit 0
	$(call colorize,$(t_cyn))
	@echo "Created Intel HEX file for eeprom: $(@)"
	$(call colorize,$(col_rst))

%.lss: %.elf
	$(call colorize,$(t_cyn))
	$(Q) $(call unquote,$(CONFIG_OBJDUMP)) -h -S $< > $@
	@echo "Created disassembly file: $(@)"
	$(call colorize,$(col_rst))

clean: $(load_makes) 
	$(info <----cleaning---->)
	$(foreach o,$(build_objects),$(shell rm -f $(o)))
	-rm $(IMAGES_DIR)$(TARGET)*

debug: $(call ldmakes, $(TOP_DIR))
	@echo "I'm gonna build: $(objects)"


analyze: $(TARGET_LSSFILE)
	$(Q) $(TOP_DIR)scripts/analyzer $(TARGET_LSSFILE)

.PHONY: $(PHONY)
.PRECIOUS: $(build_objects)
