#This is a makefile used in the actual build
#I didn't get enough dao to understand fully kbuild's magic
#ethersex's methods of compiling sucked, so I invented my own build script

include .config
include make/Makefile.lib
include arch/$(ARCH)/make.mk
objects:=
objects-y:= arch/$(ARCH)/ apps/
$(info $(objects-y))
#Out-of-dir builds not yet supported
TOP_DIR=
BUILD_DIR=
IMAGES_DIR=images/
PHONY:= build clean
INCLUDES=-I"." -I"./include"
Q:=@


#TODO: Move this shit to another Makefile, some of it is avr-specific, so
#placing it here sucks. Okay for now, though
TARGET=$(call unquote,$(CONFIG_IMAGE_FILENAME))
TARGET_HEXFILE=$(IMAGES_DIR)$(TARGET).hex
TARGET_ELFFILE=$(IMAGES_DIR)$(TARGET).elf
TARGET_LSSFILE=$(IMAGES_DIR)$(TARGET).lss
TARGET_EEPFILE=$(IMAGES_DIR)$(TARGET).eep
OUTPUT_TARGETS= $(TARGET_ELFFILE) $(TARGET_HEXFILE) $(TARGET_LSSFILE) $(TARGET_EEPFILE)

HEX_FLASH_FLAGS = -R .eeprom -R .fuse -R .lock -R .signature
HEX_EEPROM_FLAGS = -j .eeprom
HEX_EEPROM_FLAGS += --set-section-flags=.eeprom="alloc,load"
HEX_EEPROM_FLAGS += --change-section-lma .eeprom=0 --no-change-warnings
CFLAGS+=-mmcu=$(MCU) -DF_CPU=$(CONFIG_F_CPU) -Os


all: 
	$(error This makefile should not be called directly)


define ldmakes
$(eval subdirs=$(addprefix $(1),$(filter %/,$(objects-y))))
$(eval objects+=$(addprefix $(BUILD_DIR)$(1), $(filter %.o,$(objects-y))))
$(eval objects-y= )
$(foreach dir, $(subdirs),$(eval include $(dir)Makefile) $(call ldmakes,$(dir)))
endef


load_makes=	$(call ldmakes, $(TOP_DIR)) 
build_objects=	$(addprefix $(TOP_DIR),$(objects)) 





$(BUILD_DIR)%.o: $(BUILD_DIR)%.c
	@echo "Building object: $(@)"
	$(Q) $(call unquote,$(CONFIG_CC)) $(INCLUDES) $(CFLAGS) $(call unquote,$(CONFIG_CFLAGS)) -c  -o $(@) $< 


%.elf: $(objects)
	$(Q) $(call unquote,$(CONFIG_CC)) $(LDFLAGS) $(objects) $(call unquote,$(CONFIG_LDFLAGS)) -o $(@) $< 
	@echo "Linked ELF: $(@)"
	
%.hex: %.elf
	$(Q) $(call unquote,$(CONFIG_OBJCOPY)) -O ihex $(HEX_FLASH_FLAGS)  $< $@
	@echo "Created Intel HEX for flash: $(@)"

%.eep: %.elf
	$(Q) $(call unquote,$(CONFIG_OBJCOPY)) $(HEX_EEPROM_FLAGS) -O ihex $< $@ || exit 0
	@echo "Created Intel HEX for eeprom: $(@)"

%.lss: %.elf
	$(Q) $(call unquote,$(CONFIG_OBJDUMP)) -h -S $< > $@
	@echo "Created disassembly file: $(@)"



build: $(load_makes) $(build_objects) $(OUTPUT_TARGETS)
	@echo "Antares build is now complete"
	@echo "Inspect the files under $(IMAGES_DIR) and have fun"

clean: $(load_makes) 
	$(info <----cleaning---->)
	$(foreach o,$(build_objects),$(shell rm -f $(o)))
	-rm $(IMAGES_DIR)$(TARGET)*

debug: $(call ldmakes, $(TOP_DIR))
	@echo "I'm gonna build: $(objects)"

.PHONY: $(PHONY)
