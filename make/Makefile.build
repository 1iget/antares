#This is a makefile used in the actual build
#I didn't get enough dao to understand fully kbuild's magic and adopt it completely to avr
#And ethersex's methods of compiling sucked, so I invented my own build script
#Yep, there goes some NIH syndrome =)

include .config
include make/Makefile.lib

# IF U ARE PORTING TO A NEW TOOLCHAIN, THIS IS WHAT YOU ARE SEARCHING FOR
# PLACE your toolchain name here
ifeq ($(CONFIG_TOOLCHAIN_GCC),y)
TOOLCHAIN=gcc
endif


objects-y:= src/
includes-y:=

$(info $(objects-y))
#Out-of-dir builds not yet supported
TOP_DIR=./
BUILD_DIR=vars
PHONY:= build clean
INCLUDES=-I"$(TOP_DIR)" -I"$(TOP_DIR)include"
Q:=
ifneq ($(CONFIG_BUILD_VERBOSE),y)
Q=@
endif


#include Toolchain variables in our build
$(eval $(call include_toolchain,$(TOOLCHAIN),vars))

all: 
	$(error This makefile should not be called directly)


#Create sylinks in include

define clean_includes
$(info Recreating symlinks...)
$(shell find $(TOPDIR)include -type l -delete)
endef

define includedir
$(eval lndir=$(patsubst %/,%,$(dir $(patsubst %/,%,$(1)))))
$(if $(wildcard $(1)include),$(shell mkdir -p $(TOP_DIR)include/$(subst $(TOP_DIR)src/,,$(lndir)))
	$(shell ln -s $(abspath $(1)include) $(TOP_DIR)include/$(patsubst %/,%,$(subst $(TOP_DIR)src/,,$(1)))))
endef


define ldmakes
$(eval subdirs=$(addprefix $(1),$(filter %/,$(objects-y))))
$(eval objects+=$(addprefix $(BUILD_DIR)$(1), $(filter %.o,$(objects-y))))
$(eval objects-y= )
$(foreach dir, $(subdirs),$(eval include $(dir)Makefile) $(call includedir,$(dir)) $(call ldmakes,$(dir)))
endef

define linkarch
$(shell rm -Rf $(TOP_DIR)include/arch)
$(shell ln -sf ../src/arch/$(ARCH)/include include/arch)
endef

load_makes=	$(call ldmakes, $(TOP_DIR)) 
build_objects=	$(addprefix $(TOP_DIR),$(objects)) 
clean_symlinks= $(call clean_includes)
link_arch=	$(call linkarch)


build: $(clean_includes) $(load_makes) $(linkarch) $(OUTPUT_TARGETS)
	@echo "<--Makefile.build done-->"

#include toolchain rules
$(eval $(call include_toolchain,$(TOOLCHAIN),rules))
include src/arch/$(ARCH)/make.mk

clean: $(load_makes) 
	$(info <----cleaning---->)
	$(foreach o,$(build_objects),$(shell rm -f $(o)))
	-rm $(IMAGES_DIR)$(TARGET)*

debug: $(call ldmakes, $(TOP_DIR))
	@echo "I'm gonna build: $(build_objects)"


analyze: $(TARGET_LSSFILE)
	$(Q) $(TOP_DIR)scripts/analyzer $(TARGET_LSSFILE)

.PHONY: $(PHONY)
.PRECIOUS: $(build_objects)
