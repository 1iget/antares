menuconfig STM32F1X_USB
bool "STM32F1X USB Device Library"
depends on STM32F1X
depends on HAS_USB || HAS_OTG
help
	Select this, if you want to compile the USB device
	libraries shipped by ST. 

if STM32F1X_USB

   if HAS_OTG
   comment "NB: This MCU has OTG IP Core!"
   comment "TODO: CL USB-OTG MENUCONFIG HERE!"

   endif

   if HAS_USB
   comment "NB: This MCU has USB Device IP Core!"
   
   config USB_EP_NUM
   int "Number of endpoints"
   default 2

   menu "IMR_MSK bits"
   comment "Enable interrupts you wish to handle"
   
   config IMR_CNTR_CTRM
   bool "Correct TRansfer"
   default y

   config IMR_CNTR_DOVRM
   bool "DMA OVeR/underrun"

   config IMR_CNTR_ERRM
   bool "ERRor"
   
   config IMR_CNTR_WKUPM
   bool "WaKe UP"

   config IMR_CNTR_SUSPM
   bool "SUSPend"

   config IMR_CNTR_RESETM
   bool "RESET"
   default y

   config IMR_CNTR_SOFM
   bool "Start Of Frame"
   default y

   config IMR_CNTR_ESOFM
   bool "Expected Start Of Frame"

   endmenu

   config STM32_USB_HI
   bool "Use higher level API"
   select STM32_LIB_RCC
   default y
   help
	Select this to use higher level API
	taken from ST's example projects. 
	Picking this one, will automatically add
	* All needed ISR routines
	* Automatically enable USB PLL & Clocks
   
   menu "CTR Service Routines"
   #visible if STM32_USB_HI
   # Autogenerated by scripts/trash/gen_stm_usb_ep_kcnf
   # I'm not dumb to do it by hand =)

   config USB_EP1_IN_E
   bool "EP1 IN"

   if USB_EP1_IN_E
   config USB_EP1_IN_HNDL
   string "EP1 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP1_OUT_E
   bool "EP1 OUT"

   if USB_EP1_OUT_E
   config USB_EP1_OUT_HNDL
   string "EP1 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP2_IN_E
   bool "EP2 IN"

   if USB_EP2_IN_E
   config USB_EP2_IN_HNDL
   string "EP2 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP2_OUT_E
   bool "EP2 OUT"

   if USB_EP2_OUT_E
   config USB_EP2_OUT_HNDL
   string "EP2 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP3_IN_E
   bool "EP3 IN"

   if USB_EP3_IN_E
   config USB_EP3_IN_HNDL
   string "EP3 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP3_OUT_E
   bool "EP3 OUT"

   if USB_EP3_OUT_E
   config USB_EP3_OUT_HNDL
   string "EP3 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP4_IN_E
   bool "EP4 IN"

   if USB_EP4_IN_E
   config USB_EP4_IN_HNDL
   string "EP4 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP4_OUT_E
   bool "EP4 OUT"

   if USB_EP4_OUT_E
   config USB_EP4_OUT_HNDL
   string "EP4 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP5_IN_E
   bool "EP5 IN"

   if USB_EP5_IN_E
   config USB_EP5_IN_HNDL
   string "EP5 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP5_OUT_E
   bool "EP5 OUT"

   if USB_EP5_OUT_E
   config USB_EP5_OUT_HNDL
   string "EP5 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP6_IN_E
   bool "EP6 IN"

   if USB_EP6_IN_E
   config USB_EP6_IN_HNDL
   string "EP6 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP6_OUT_E
   bool "EP6 OUT"

   if USB_EP6_OUT_E
   config USB_EP6_OUT_HNDL
   string "EP6 OUT Handler"
   default "NOP_Process"
   endif   

   config USB_EP7_IN_E
   bool "EP7 IN"

   if USB_EP7_IN_E
   config USB_EP7_IN_HNDL
   string "EP7 IN Handler"
   default "NOP_Process"
   endif   

   config USB_EP7_OUT_E
   bool "EP7 OUT"

   if USB_EP7_OUT_E
   config USB_EP7_OUT_HNDL
   string "EP7 OUT Handler"
   default "NOP_Process"
   endif   

   
   endmenu
   
   endif

   
   
   	
endif

